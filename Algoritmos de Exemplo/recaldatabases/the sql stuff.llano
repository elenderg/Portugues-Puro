\ Begin the routines that you actually use, the ones below this section are internal /

A connection string is a string.

A sql statement is a string.

A database is a thing with
  an affected row count,
  a null flag flag,
  a done flag, \ used internally
  a sqlhenv, \ used internally
  a sqlhdbc, \ used internally
  a sqlhstmt. \ Used internally

To add to a database using a sql statement:
  If the database is nil, exit.
  Execute the sql statement given the database's sqlhstmt returning the database's affected row count.

To add to a database using a sql statement returning an affected row count:
  If the database is nil, exit.
  Add to the database using the sql statement.
  Put the database's affected row count into the affected row count.

To close a database:
  If the database is nil, exit.
  Destroy the database's sqlhstmt.
  Disconnect the database's  sqlhdbc.
  Destroy the database's  sqlhdbc.
  Destroy the database's  sqlhenv.
  Destroy the database.

To create a database:
  Allocate memory for the database.

To decide If a database is out of rows:
  If the database is  nil, say yes.
  If the database's done flag is set, say yes.
  Say no.

To delete from a database using a sql statement:
  If the database is nil, exit.
  Execute the sql statement given the database's sqlhstmt returning the database's affected row count.

To delete from a database using a sql statement returning an affected row count:
  If the database is nil, exit.
  Delete from the database using the sql statement.
  Put the database's affected row count into the affected row count.

To get the next row from a database:
  If the database is nil, exit.
  Fetch data from the database's sqlhstmt returning the database's done flag.

To get a number from column a column number of a database:
  If the database is nil, clear the number; exit.
  Get the number given the database's sqlhstmt and the column number returning the database's null flag.

To get a string from column a column number of a database:
  If the database is nil, clear the string; exit.
  Get the string given the database's sqlhstmt and the column number returning the database's null flag.

To open a database using a connection string:
  Clear the i/o error.
  If the database is not nil, close the database.
  Create the database.
  Create the database's sqlhenv.
  If the database's sqlhenv is nil, close the database; exit.
  Create the database's sqlhdbc given the database's sqlhenv.
  If the database's sqlhdbc is nil, close the database; exit.
  Connect the database's sqlhdbc given the connection string.
  If the i/o error is not "", close the database; exit.
  Create the database's sqlhstmt given the database's sqlhdbc.
  If the database's sqlhstmt is nil, close the database; exit.

To update a database using a sql statement:
  If the database is nil, exit.
  Execute the sql statement given the database's sqlhstmt returning the database's affected row count.

To update a database using a sql statement returning an affected row count:
  If the database is nil, exit.
  Update the database using the sql statement.
  Put the database's affected row count into the affected row count.

To view a database using a sql statement:
  If the database is nil, exit.
  Execute the sql statement given the database's sqlhstmt returning the database's affected row count.

\ End the routines that you actually use, the ones below this section are internal /

A sqlhandle is a pointer.
A sqlhenv is a sqlhandle.
A sqlhdbc is a sqlhandle.
A sqlhstmt is a sqlhandle.

To create a sqlhenv:
  Clear the i/o error.
  Clear the sqlhenv.
  Call "odbc32.dll" "sqlallochandle" with 1 [sql_handle_env] and 0 [sql_null_handle] and the sqlhenv's whereabouts returning a result wyrd.
  If the sqlhenv is 0, put "error creating a sql environment" into the i/o error; exit.
  If the result wyrd is a sql error wyrd, put "error creating a sql environment" into the i/o error; exit.
  Call "odbc32.dll" "sqlsetenvattr" with the sqlhenv and 200 [sql_attr_odbc_version] and 3 [sql_ov_odcb3] and 0. \ Set odbc version

To destroy a sqlhenv:
  If the sqlhenv is nil, exit.
  Call "odbc32.dll" "sqlfreehandle" with 1 [sql_handle_env] and the sqlhenv.

To create a sqlhdbc given a sqlhenv:
  Clear the i/o error.
  Clear the sqlhdbc.
  Call "odbc32.dll" "sqlallochandle" with 2 [sql_handle_dbc] and the sqlhenv and the sqlhdbc's whereabouts returning a result wyrd.
  If the sqlhdbc is 0,  get the i/o error given the sqlhenv; exit.
  If the result wyrd is a sql error wyrd, get the i/o error given the sqlhenv; exit.

To destroy a sqlhdbc:
  If the sqlhdbc is nil, exit.
  Call "odbc32.dll" "sqlfreehandle" with 2 [sql_handle_dbc] and the sqlhdbc.

To connect a sqlhdbc given a connection string:
  Clear the i/o error.
  Reassign a output string's first given 1024.
  Call "odbc32.dll" "sqldriverconnect" with 
    the sqlhdbc and 
    0 and 
    the connection string's first and 
    the connection string's length and 
    the output's first and 
    the output's length and 
    a length's whereabouts and 
    0 [sql_driver_noprompt] 
  returning a result wyrd.
  If the sqlhdbc is 0, get the i/o error given the sqlhdbc; exit.
  If the result wyrd is a sql error wyrd, get the i/o error given the sqlhdbc; exit.

To disconnect a sqlhdbc:
  If the sqlhdbc is nil, exit.
  Call "odbc32.dll" "sqldisconnect" with the sqlhdbc.

To create a sqlhstmt given a sqlhdbc:
  Clear the i/o error.
  Clear the sqlhstmt.
  Call "odbc32.dll" "sqlallochandle" with 3 [sql_handle_stmt] and the sqlhdbc and the sqlhstmt's whereabouts returning a result wyrd.
  If the sqlhstmt is 0, get the i/o error given the sqlhdbc; exit.
  If the result wyrd is a sql error wyrd, get the i/o error given the sqlhdbc; exit.

To destroy a sqlhstmt:
  If the sqlhstmt is nil, exit.
  Call "odbc32.dll" "sqlfreehandle" with 3 [sql_handle_stmt] and the sqlhstmt.

To execute a sql string given a sqlhstmt returning an affected row count:
  Clear the i/o error.
  Put 0 into the affected row count.
  Call "odbc32.dll" "sqlexecdirect" with the sqlhstmt and the sql string's first and the sql string's length returning a result wyrd.
  Put the result wyrd into a result number.
  If the result number is 100 [sql_no_data], exit.
  If the result wyrd is a sql error wyrd, get the i/o error given the sqlhstmt; exit.
  Call "odbc32.dll" "sqlrowcount" with the sqlhstmt and the affected row count's whereabouts.

To fetch data given a sqlhstmt returning a done flag:
  Clear the i/o error.
  Clear the done flag.
  Call "odbc32.dll" "sqlfetch" with the sqlhstmt returning a result wyrd.
  Put the result wyrd into a number.
  If the number is 100 [sql_no_data], set the done flag; exit.
  If the result wyrd is a sql error wyrd, get the i/o error given the sqlhstmt; set the done flag; exit.

To get a number given a sqlhstmt and a column number returning a null flag:
  Clear the i/o error.
  Clear the number.
  Clear the null flag.
  Call "odbc32.dll" "sqlgetdata" with the sqlhstmt and the column number and 4 [sql_integer] and 
    the number's whereabouts and the number's magnitude and an indicator number's whereabouts returning a result wyrd.
  If the result wyrd is a sql error wyrd, get the i/o error given the sqlhstmt; exit.
  If the indicator number is -1 [sql_null_data], set the null flag.

To get a string given a sqlhstmt and a column number returning a null flag:
  Clear the i/o error.
  Clear the string.
  Clear the null flag.
  Put 1024 into a temp length.
  Reassign a temp string's first given the temp length.
  Loop.
  Put 0 into a length.
  Call "odbc32.dll" "sqlgetdata" with the sqlhstmt and the column number and 1 [sql_char] and 
    the temp string's first and the temp length and the length's whereabouts returning a result wyrd.
  Put the result wyrd into a result number.
  If the result number is -1 [sql_null_data], set the null flag; exit. 
  If the length is -1 [sql_null_data], set the null flag; exit. 
  If the result number is not 0 [sql_success], put the temp length minus 2 into the length. \ Minus 2 for 2 null bytes
  put the temp string's first plus the length minus 1 into the temp string's last.
  Append the temp string to the string.
  If the result number is 0 [sql_success], exit.
  If the result number is not 1 [sql_success_with_info], get the i/o error given the sqlhstmt; exit.
  Get a sql error given the sqlhstmt and 3 [sql_handle_stmt]. \ Really just need the state code here, could be made faster not getting entire error message
  If the sql error's state is not "01004", get the i/o error given the sqlhstmt; exit. \ If not "data truncated" error, some other error which we don't handle
  repeat.

To decide If a wyrd is a sql error wyrd:
  put the wyrd into a number.
  If the number is 0 [sql_success], say no.
  If the number is 1 [sql_success_with_info], say no.
  Say yes.

To get an error string given a sqlhstmt:
  get a sql error given the sqlhstmt and 3 [sql_handle_stmt].
  Put the sql error's message into the error.

To get an error string given a sqlhenv:
  get a sql error given the sqlhenv and 1 [sql_handle_env].
  Put the sql error's message into the error.

To get an error string given a sqlhdbc:
  get a sql error given the sqlhdbc and 2 [sql_handle_dbc].
  Put the sql error's message into the error.

To get a sql error given a sqlhandle and a handle type number:
 \ prepare variables
  put "00000" into a state string. Null terminate the state string.
  Put 1024 into a message length.
  Reassign a message string's first given the message length.
  \ Get the data
  call "odbc32.dll" "sqlgetdiagrec" with the handle type and the sqlhandle and 1 and the state's first and 
    a native number's whereabouts and the message string's first and the message length and the message length's whereabouts
    returning a result wyrd.
  Put the result wyrd into a result number.
  If the result number is 100 [sql_no_data], put 0 into the message length.
  Put the message string's first plus the message length minus 1 into the message string's last.
  \ Put the data into our structure
  put the native number into the sql error's native error. 
  Put the state into the sql error's state.
  Put the message string into the sql error's message.
  
A sql error has
  a native error number,
  a state string,
  a message string.

\ Begin these routines should be put into the noodle /

To clear a pointer:
  put nil into the pointer.

To write a pointer:
  convert the pointer to a string.
  Write the string.

\ End these routines should be put into the noodle /

